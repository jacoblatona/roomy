import { type NextPage } from "next";
import Head from "next/head";
import Layout from "../../components/Layout";
import { trpc } from "../../utils/trpc";
import { useRouter } from "next/router";
import AskQuestionModal from "../../components/modals/AskQuestionModal";
import { useAtom } from "jotai";
import { isAskQuestionModalOpenAtom } from "../../atoms/modals";
import { ParticipantPlusUser, QuestionPlusUser } from "../../types/models";
import moment from "moment";
import { toast } from "react-toastify";
import { useSession } from "next-auth/react";
import { useEffect, useState } from "react";

const Room: NextPage = () => {
  const [open, setOpen] = useAtom(isAskQuestionModalOpenAtom);
  const Router = useRouter();

  const id = Router.query.id as string;

  const { data: room, isLoading } = trpc.room.getRoom.useQuery({ id });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="container mx-auto py-16">
          <div className="flex gap-10">
            <div className="grow">
              <h1 className="text-4xl font-bold text-white">{room?.name}</h1>
              <p className="text-lg text-white/50">{room?.description}</p>
              <div className="mt-5 flex items-center gap-2">
                <img
                  src={room?.creator.image as string}
                  className="h-7 w-7 rounded-full"
                />
                <span className="text-sm font-semibold text-white/50">
                  Created by {room?.creator.name}
                </span>
              </div>
              <div className="mt-14 flex items-center gap-2">
                <div className="flex w-full items-center justify-between">
                  <h1 className="text-2xl font-semibold text-white">
                    Questions
                  </h1>
                  <button
                    onClick={() => setOpen(!open)}
                    type="button"
                    className="inline-flex items-center justify-center gap-2 rounded-full border border-transparent bg-indigo-600 px-5 py-2 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-0"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={1.5}
                      stroke="currentColor"
                      className="h-6 w-6 text-white"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z"
                      />
                    </svg>
                    Ask Question
                  </button>
                </div>
              </div>
              <div className="mt-7 flex flex-col space-y-3">
                {room?.questions.map((question) => (
                  <QuestionShowcase
                    id={question.id}
                    question={question.question}
                    user={question.user}
                    ratings={question.ratings}
                    createdAt={question.createdAt}
                    key={question.id}
                  />
                ))}
              </div>
            </div>
            <div className="w-80 flex-none">
              <div className="w-full rounded-md p-5">
                <p className="text-md font-bold text-white">Owner</p>
                <div className="mt-3 flex flex-col">
                  <div className="flex w-full items-center gap-2 rounded-md bg-slate-700 p-2 py-3">
                    <img
                      src={room?.creator.image as string}
                      className="h-9 w-9 rounded-full"
                    />
                    <div className="flex flex-col">
                      <span className="text-sm font-semibold text-white">
                        {room?.creator.name}
                      </span>
                      <span className="text-xs text-indigo-400">Creator</span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="w-full rounded-md p-5">
                <div className="flex items-center justify-between">
                  <p className="text-md font-bold text-white">Members</p>
                  <span className="text-white">
                    {room?.participants.length}
                  </span>
                </div>
                <div className="mt-3 flex flex-col">
                  {room?.participants.map((participant) => (
                    <ParticipantShowcase
                      key={participant.id}
                      id={participant.id}
                      user={participant.user}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </Layout>
      <AskQuestionModal id={room?.id as string} />
    </>
  );
};

export default Room;

const ParticipantShowcase: React.FC<ParticipantPlusUser> = ({
  id,
  user,
}: ParticipantPlusUser) => {
  return (
    <div className="flex w-full items-center gap-2 rounded-md p-2 py-3">
      <img src={user.image as string} className="h-9 w-9 rounded-full" />
      <div className="flex flex-col">
        <span className="text-sm font-semibold text-white">{user.name}</span>
        <span className="text-xs text-indigo-400">Member</span>
      </div>
    </div>
  );
};

const QuestionShowcase: React.FC<QuestionPlusUser> = ({
  id,
  question,
  user,
  ratings,
  createdAt,
}: QuestionPlusUser) => {
  const { data: sessionData } = useSession();

  const [rating, setRating] = useState<string | undefined>();

  useEffect(() => {
    if (sessionData) {
      for (let i = 0; i < ratings.length; i++) {
        if (ratings[i]?.userId === sessionData.user?.id) {
          setRating(ratings[i]?.type);
        }
      }
    }

    return () => setRating(undefined);
  }, []);

  const likes = ratings.filter((rating) => {
    return rating.type === "like";
  });

  const dislikes = ratings.filter((rating) => {
    return rating.type === "dislike";
  });

  const total = likes.length - dislikes.length;

  const { mutate, error, data } = trpc.question.createRating.useMutation({
    onError: (error) => {
      toast.error(error.message);
    },
    onSuccess: (data) => {
      setRating(data.type);
    },
  });

  const handleSubmit = async (type: string) => {
    mutate({
      type,
      questionId: id,
    });
  };

  return (
    <div className="flex w-full items-center justify-between rounded-md bg-slate-700 px-5 py-3">
      <div>
        <div className="flex items-center gap-2">
          <span className="items-center text-sm text-white/50">
            Posted by /{user.name}
          </span>
          <div className="h-1 w-1 rounded-full bg-white/50"></div>
          <span className="text-sm text-white/50">
            {" "}
            {moment(createdAt).fromNow()}
          </span>
        </div>
        <p className="text-xl font-bold text-white">{question}</p>
      </div>
      <div className="flex flex-col items-center gap-3 text-white/50">
        <svg
          onClick={() => (rating !== "like" ? handleSubmit("like") : null)}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1.5}
          stroke="currentColor"
          className={`h-6 w-6 cursor-pointer ${
            rating === "like" && "text-green-500"
          }`}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M4.5 15.75l7.5-7.5 7.5 7.5"
          />
        </svg>

        <span className="text-white/50">{total >= 0 ? total : 0}</span>
        <svg
          onClick={() =>
            rating !== "dislike" ? handleSubmit("dislike") : null
          }
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1.5}
          stroke="currentColor"
          className={`h-6 w-6 cursor-pointer ${
            rating === "dislike" && "text-red-500"
          }`}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M19.5 8.25l-7.5 7.5-7.5-7.5"
          />
        </svg>
      </div>
    </div>
  );
};
